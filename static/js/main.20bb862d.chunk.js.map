{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","type","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","sourceDoc","setSourceDoc","timeout","setTimeout","clearTimeout","srcDoc","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAUe,SAASA,EAAOC,GAC7B,IAAOC,EAAuCD,EAAvCC,SAASC,EAA8BF,EAA9BE,YAAYC,EAAkBH,EAAlBG,MAAMC,EAAYJ,EAAZI,SAClC,EAAuBC,oBAAS,GAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAMA,OACI,yBAAKC,UAAS,2BAAsBF,EAAO,GAAG,cAC5C,yBAAKE,UAAU,gBACVN,EACD,4BAAQO,QAAS,kBAAMF,GAAQ,SAAAG,GAAQ,OAAKA,MAAWC,KAAK,SAASH,UAAU,uBAC7E,kBAAC,IAAD,CAAiBI,KAAMN,EAAOO,IAAcC,QAGlD,kBAAC,aAAD,CACAC,eAbJ,SAAsBC,EAAOC,EAAKd,GAC9BC,EAASD,IAaTA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAa,EACbC,MAAK,EACLC,KAAKpB,EACLqB,aAAY,EACZC,MAAM,eC/BH,SAASC,EAAgBC,EAAIC,GACxC,IAAMC,EAHK,eAGkBF,EAE7B,EAAyBpB,oBAAS,WAC9B,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GACb,oBAAjBF,EACAA,IAEAA,KANf,mBAAOvB,EAAP,KAAa8B,EAAb,KAcA,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAYI,KAAKK,UAAUjC,MAClD,CAACwB,EAAYxB,IAER,CAACA,EAAM8B,GCmCHI,MApDf,WACE,MAAuBb,EAAgB,OAAO,IAA9C,mBAAOc,EAAP,KAAYC,EAAZ,KACA,EAAqBf,EAAgB,MAAM,IAA3C,mBAAOgB,EAAP,KAAWC,EAAX,KACA,EAAmBjB,EAAgB,KAAK,IAAxC,mBAAOkB,EAAP,KAAUC,EAAV,KACA,EAAiCtC,mBAAS,IAA1C,mBAAOuC,EAAP,KAAiBC,EAAjB,KAaA,OAXAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAa,2BAAD,OAEAP,EAFA,qCAGCE,EAHD,uCAIEE,EAJF,iCAKA,KACd,OAAO,kBAAMM,aAAaF,MAC1B,CAACR,EAAKE,EAAIE,IAGV,oCACE,yBAAKlC,UAAU,iBACb,kBAACT,EAAD,CACAE,SAAS,MACTC,YAAY,OACZC,MAAOmC,EACPlC,SAAUmC,IAEV,kBAACxC,EAAD,CACAE,SAAS,MACTC,YAAY,MACZC,MAAOqC,EACPpC,SAAUqC,IAEV,kBAAC1C,EAAD,CACAE,SAAS,KACTC,YAAY,KACZC,MAAOuC,EACPtC,SAAUuC,KAGZ,yBAAKnC,UAAU,QACb,4BACAyC,OAAQL,EACRM,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YC5CfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.20bb862d.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/xml/xml'\nimport 'codemirror/mode/javascript/javascript'\nimport 'codemirror/mode/css/css'\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCompressAlt,faExpandAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Editor(props) {\n  const {language,displayName,value,onChange} = props\n  const [open,setOpen] = useState(true)\n\n    function handleChange(editor,data,value) {\n        onChange(value)\n    } \n\n  return (\n      <div className={`editor-container ${open ? '':'collapsed'}`}>\n        <div className='editor-title'>\n            {displayName}\n            <button onClick={() => setOpen(prevOpen => !prevOpen)} type='button' className='expand-collapse-btn'>\n              <FontAwesomeIcon icon={open ? faCompressAlt:faExpandAlt}></FontAwesomeIcon>\n            </button>\n        </div>\n        <ControlledEditor \n        onBeforeChange={handleChange}\n        value={value}\n        className='code-mirror-wrapper'\n        options={{\n            lineWrapping:true,\n            lint:true,\n            mode:language,\n            lineNumbers:true,\n            theme:'material'\n        }}\n        />\n      </div>\n  )\n}\n","import {useState,useEffect} from 'react';\r\n\r\nconst PREFIX = 'text-editor-'\r\n\r\nexport default function useLocalStorage(key,initialValue) {\r\n    const prefixedKey = PREFIX + key\r\n\r\n    const [value,setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n        if (typeof initialValue === 'function'){\r\n            return initialValue()\r\n        }else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey,JSON.stringify(value))\r\n    },[prefixedKey,value])\r\n\r\n    return [value,setValue]\r\n}\r\n","import React,{useState,useEffect} from \"react\";\nimport Editor from \"./Editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nfunction App() {\n  const [html,setHtml] = useLocalStorage('html','')\n  const [css,setCss] = useLocalStorage('css','')\n  const [js,setJs] = useLocalStorage('js','')\n  const [sourceDoc,setSourceDoc] = useState(\"\") \n\n  useEffect(()=>{\n    const timeout = setTimeout(()=>{\n      setSourceDoc(\n        `<html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html`)},250)\n    return () => clearTimeout(timeout)\n  },[html,css,js])\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor \n        language='xml'\n        displayName='HTML'\n        value={html}\n        onChange={setHtml}\n        />\n        <Editor \n        language='css'\n        displayName='CSS'\n        value={css}\n        onChange={setCss}\n        />\n        <Editor \n        language='js'\n        displayName='JS'\n        value={js}\n        onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe \n        srcDoc={sourceDoc}\n        title=\"Output\"\n        sandbox=\"allow-scripts\"\n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"100%\" />\n      </div>\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}